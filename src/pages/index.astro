---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
---

<Layout title="Cloudy.">
  <main>
    <div class="vector">
      <img src="https://www.svgrepo.com/show/112643/cloudy.svg" alt="favicon.svg" class="img-svg" width="100" height="100">
    </div>
    <h1>Welcome to <span class="text-gradient">Cloudy</span></h1>
    <p class="instructions">A webapp for sharing files without Registration or Logins & fully anonymous!</p>
    <p class="info">
      Just pick a file and click on Upload, then <code>Cloudy</code> will give you an URL for sharing.<br/>
    </p>

    <form id="uploadForm" class="upload-form">
      <label for="file" class="file-upload">Choose a file:</label>
      <input type="file" id="file" name="file" required>
      <br><br>
      <button type="submit" class="upload-btn">Upload</button>
      <br>
    </form>

    <div id="progress-container" style="display: none;">
      <div id="progress-bar"></div>
    </div>
    <div id="message" style="display: none;"></div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('uploadForm') as HTMLFormElement | null;
        const fileInput = document.getElementById('file') as HTMLInputElement | null;
        const progressContainer = document.getElementById('progress-container') as HTMLDivElement | null;
        const progressBar = document.getElementById('progress-bar') as HTMLDivElement | null;
        const message = document.getElementById('message') as HTMLDivElement | null;

        if (form && fileInput && progressContainer && progressBar && message) {
          form.addEventListener('submit', async (event) => {
            event.preventDefault();
            
            if (fileInput.files && fileInput.files[0]) {
              const formData = new FormData();
              formData.append('file', fileInput.files[0]);

              const xhr = new XMLHttpRequest();
              xhr.open('POST', 'https://vmi2102417.contaboserver.net/upload', true);

              xhr.upload.onprogress = function (event) {
                if (event.lengthComputable) {
                  const percentComplete = (event.loaded / event.total) * 100;
                  progressContainer.style.display = 'block';
                  progressBar.style.width = percentComplete + '%';
                }
              };

              xhr.onload = function () {
                if (xhr.status === 200) {
                  const result = xhr.responseText;
                  message.style.display = 'block';
                  message.innerHTML = `<p>Upload successful!</p> <br> <p> <a href="${result}">${result} </a></p>`;
                  progressContainer.style.display = 'none';
                } else {
                  message.style.display = 'block';
                  message.innerHTML = `<p class="upload-form">Error: ${xhr.statusText}</p>`;
                }
              };

              xhr.onerror = function () {
                message.style.display = 'block';
                message.innerHTML = `<p class="upload-form">Error in connection.</p>`;
              };

              xhr.send(formData);
            } else {
              console.error('File input not found or no file selected');
            }
          });
        } else {
          console.error('One or more elements not found');
        }
      });
    </script>
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }

  .upload-form {
    text-align: center;
    background-color: #1e1e2f;
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    max-width: 400px;
    margin: 0 auto;
    color: white;
  }

  .custom-file-upload {
    background-color: #282c34;
    color: white;
    padding: 10px 20px;
    border: 2px solid #6c63ff;
    border-radius: 8px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
    display: inline-block;
    margin-bottom: 1rem;
  }

  .custom-file-upload:hover {
    background-color: #6c63ff;
  }

  .custom-file-upload input[type="file"] {
    display: none;
  }

  .upload-btn {
    background-color: #6c63ff;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
  }

  .upload-btn:hover {
    background-color: #575de3;
  }

  .upload-btn:active {
    background-color: #4a4fc2;
  }

  .upload-btn:focus {
    outline: none;
    box-shadow: 0 0 0 2px rgba(108, 99, 255, 0.5);
  }

  .vector {
    max-width: fit-content;
    margin-left: auto;
    margin-right: auto;
  }

  #progress-container {
    width: 100%;
    background-color: #f3f3f3;
    margin-top: 10px;
  }

  #progress-bar {
    width: 0;
    height: 20px;
    background-color: #4caf50;
  }

  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .info {
    margin-bottom: 2rem;
    border: 4px solid rgba(var(--accent-light), 25%);
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
</style>
